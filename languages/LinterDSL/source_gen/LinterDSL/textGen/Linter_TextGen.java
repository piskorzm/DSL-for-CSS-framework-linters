package LinterDSL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Linter_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("function classMisuseCheck(name, id, description, applyTo, intendedTagTypes, violationMessage) {");
    tgs.newLine();
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disable.includes(id)) {");
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var missuses = [];");
    tgs.newLine();
    tgs.indent();
    tgs.append("applyTo.forEach(function(selector) {");
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("missuses.push($(selector + ':not(' + intencedTagTypes.join(',') + ')');");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("});");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (missuses.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.warn(violationMessage);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function childrenTypeCheck(name, id, description, applyTo, allow, prohibit, required, violationMessage) {");
    tgs.newLine();
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disable.includes(id)) {");
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();

    tgs.append("var inappropriateChildren = [];");
    tgs.newLine();
    tgs.indent();
    tgs.append("var elementsMissingChildren = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("applyTo.forEach(function(selector) {");
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("inappropriateChildren.push($(selector + ' ~ :not(' + allowed.join(',') + ')'));");
    tgs.newLine();
    tgs.indent();
    tgs.append("required.forEach(function(required) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("$(selector).forEach(funciton(element) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!element.has(requiredChild).lenght) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("elementsMissingChildren.push(element);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("});");
    tgs.newLine();

    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("});");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("});");
    tgs.newLine();

    tgs.indent();
    tgs.append("if ($(elementsMissingChildren.length || $(inappropriateChildren).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.warn(violationMessage);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function missingTagCheck(name, id, description, applyTo, unique, violationMessage) {");
    tgs.newLine();
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var missingTags = [];");
    tgs.newLine();
    tgs.indent();
    tgs.append("var duplicatedTags = [];");

    tgs.indent();
    tgs.append("applyTo.forEach(function(selector) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!$(selector).length) {");
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("missingTags.push(selector);");
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if ($(selector).length) > 1 && unique) {");
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("duplicatedTags.concat($(selector));");
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("});");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();


    tgs.newLine();
    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), MetaAdapterFactory.getContainmentLink(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x74695853078e2ae6L, "checks"))) {
      tgs.appendNode(item);
    }
  }
}
