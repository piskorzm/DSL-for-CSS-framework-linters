package LinterDSL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class Linter_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("//generated linter for ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x74695853078e2b1eL, "supportedFramework")));
    tgs.append(" v ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x4ec665a8190cca34L, "supportedVersion")));
    tgs.newLine();
    tgs.newLine();

    tgs.append("jQuery.expr[':'].regex = function(elem, index, match) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var matchParams = match[3].split(','), validLabels = /^(data|css):/,");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("attr = {method: matchParams[0].match(validLabels) ?  matchParams[0].split(':')[0] : 'attr', property: matchParams.shift().replace(validLabels,'')},");
    tgs.newLine();
    tgs.indent();
    tgs.append("regexFlags = 'ig', regex = new RegExp(matchParams.join('').replace(/^\\s+|\\s+$/g,''), regexFlags);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("return regex.test(jQuery(elem)[attr.method](attr.property));");
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function childrenTypeCheck(id, customMessage, type, applyTo, allowedChildrenSelectors) {");
    tgs.newLine();
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var inappropriateChildren = $(investigatedElement).filter(applyTo.join(', ')).children(':not(' + allowedChildrenSelectors.join(', ') + ')').toArray();");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (inappropriateChildren.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'InappropriateChildren' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only have children matching ' + allowedChildrenSelectors.join(' or ') + '. Element: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage5(type, message, investigatedElement, '\\n InappropriateChildren: ', inappropriateChildren);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var elementsWithInappropriateChildren = $(applyTo.join(', ') + ' > :not(' + allowedChildrenSelectors.join(', ') + ')').parent().toArray();");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (elementsWithInappropriateChildren.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'InappropriateChildren' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only have children matching ' + allowedChildrenSelectors.join(' or ') + '. Elements with inappropriate children: ';");
    tgs.newLine();
    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();

    tgs.indent();
    tgs.append("printMessage3(type, message, elementsWithInappropriateChildren);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("function requiredChildCheck(id, customMessage, type, position, unique, applyTo, requiredChildSelectors) {");
    tgs.newLine();
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if ($(investigatedElement).filter(applyTo.join(', ')).length && (!$(investigatedElement).children(requiredChildSelectors.join(', ')).length || (unique && !$(investigatedElement.children(requiredChildSelectors.join(', '). length != 1))))) {");
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'RequiredChildren' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' must have ' + (unique ? 'exactly' : 'at least') + ' one child matching ' + requiredChildSelectors.join(' or ') + ' at position ' + position + '. Element: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();

    tgs.indent();
    tgs.append("printMessage3(type, message, investigatedElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var elementsMissingChildren = [];");
    tgs.newLine();
    tgs.indent();
    tgs.append("$(applyTo.join(', ')).each(function() {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var foundChildrenCount = $(this).children(requiredChildSelectors.join(', ')).length;");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (foundChildrenCount == 0 || (unique && foundChildrenCount != 1)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("elementsMissingChildren.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("});");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (elementsMissingChildren.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'RequiredChildren' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' must have ' + (unique ? 'exactly' : 'at least') + ' one child matching ' + requiredChildSelectors.join(' or ') + ' at position ' + position + '. Elements missing required children: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, elementsMissingChildren);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function misuseCheck(id, customMessage, type, applyTo, requiredSelectors) {");
    tgs.newLine();
    tgs.newLine();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if ($(investigatedElement).filter(applyTo.join(', ')).length && $(investigatedElement).filter(':not(' + requiredSelectors.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'ElementMissuse' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' must also match ' + requiredSelectors.join(' or ') + '. Element: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, investigatedElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var missingRequiredSelectors = $(applyTo.join(', ')).filter(':not(' + requiredSelectors.join(', ') + ')').toArray();");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (missingRequiredSelectors.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'ElementMissuse' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' must also match ' + requiredSelectors.join(' or ') + '. Misused elements: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, missingRequiredSelectors);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function missingElementCheck(id, customMessage, type, applyTo) {");
    tgs.newLine();
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var requiredElement = requiredElements.find(e => e.id === id);");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (requiredElement !== undefined && requiredElement.missing) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("requiredElement.missing = ($(investigatedElement).filter(applyTo.join(', ')).length ? false : true);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (requiredElement === undefined) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append(" var missing = ($(investigatedElement).filter(applyTo.join(', ')).length ? false : true);");
    tgs.newLine();
    tgs.indent();
    tgs.append("requiredElement = {applyTo: applyTo, id: id, type: type, missing: missing, customMessage: customMessage};");
    tgs.newLine();
    tgs.indent();
    tgs.append("requiredElements.push(requiredElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!$(applyTo.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'MissingElement' + type + ' (check id: ' + id + '): presence of an element matching ' + applyTo.join(' or ') + ");
    tgs.append("' is required by ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x74695853078e2b1eL, "supportedFramework")));
    tgs.append(".';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage2(type, message);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function invalidElementCheck(id, customMessage, type, applyTo) {");
    tgs.newLine();
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if ($(investigatedElement).filter(applyTo.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'InvalidElement' + type + ' (check id: ' + id + '): elements matching ' + applyTo.join(' or ') + ");
    tgs.append("' are not valid in ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x74695853078e2b1eL, "supportedFramework")));
    tgs.append(". Element: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, investigatedElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var invalidElements = ($(applyTo.join(', ')).toArray());");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (invalidElements.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'InvalidElement' + type + ' (check id: ' + id + '): elements matching ' + applyTo.join(' or ') + ");
    tgs.append("' are not valid in ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x74695853078e2b1eL, "supportedFramework")));
    tgs.append(". InvalidElements: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, invalidElements);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("function parentTypeCheck(id, customMessage, type, applyTo, allowedDirectParents) {");
    tgs.newLine();
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if ($(investigatedElement).filter(applyTo.join(', ')).length && !$(investigatedElement).parent(allowedDirectParents.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'DirectParent' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only be direct children of elements matching: ' + allowedDirectParents.join(' or ') + '. Elements: '");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, investigatedElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var elementsWithInappropriateParents = [];");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("$(applyTo.join(', ')).each(function () {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!$(this).parent(allowedDirectParents.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("elementsWithInappropriateParents.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("});");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (elementsWithInappropriateParents.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'DirectParent' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only be direct children of elements matching: ' + allowedDirectParents.join(' or ') + '. Elements with inappropriate parents: '");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, elementsWithInappropriateParents);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("function predecessorsTypeCheck(id, customMessage, type, gen, applyTo, requiredPredecessorSelectors) {");
    tgs.newLine();
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (gen == -1) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if ($(investigatedElement).filter(applyTo.join(', ')).length && !$(investigatedElement).parents(requiredPredecessorSelectors.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'Predecessor' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' must appear ' + gen + ' generations below  an element matching: ' + requiredPredecessorSelectors.join(' or ') + '. Elements: '");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, investigatedElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if ($(investigatedElement).filter(applyTo.join(', ')).length && !$(investigatedElement).parents().get(gen).filter(requiredPredecessorSelectors.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'Predecessor' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' must be descendants of an element matching: ' + requiredPredecessorSelectors.join(' or ') + '. Elements: '");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, investigatedElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var elementsWithInappropriateParents = [];");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("$(applyTo.join(', ')).each(function () {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (gen > -1) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!$(this).parents.get(gen).filter(requiredPredecessorSelectors.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("elementsWithInappropriateParents.push($(this));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!$(this).parents(requiredPredecessorSelectors.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("elementsWithInappropriateParents.push($(this));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("});");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (elementsWithInappropriateParents.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'Predecessor' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' must be descendants of an element matching: ' + requiredPredecessorSelectors.join(' or ') + '. Misplaced elements: '");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (customMessage != '-' ? customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage3(type, message, elementsWithInappropriateParents);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function siblingsCheck(id, customMessage, type, condition, applyTo, allowedSiblings) {");
    tgs.newLine();
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (!disabledChecks.includes(id)) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var valid = true");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'Next' && $(investigatedElement).next(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("valid = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only have next immediate sibling matching: ' + allowedSiblings.join(' or ') + '. Misplaced element: '");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'NextAll' && $(investigatedElement).nextAll(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("valid = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only next siblings matching: ' + allowedSiblings.join(' or ') + '. Misplaced element: '");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'NextNo' && !$(investigatedElement).is(':last-child')) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("valid = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can not have any next siblings. Misplaced element: '");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (condition == 'Prev' && $(investigatedElement).prev(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("valid = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only have previous immediate sibling matching: ' + allowedSiblings.join(' or ') + '. Misplaced element: '");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'PrevAll' && $(investigatedElement).prevAll(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("valid = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only have previous siblings matching: ' + allowedSiblings.join(' or ') + '. Misplaced element: '");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'PrevNo' && !$(investigatedElement).is(':first-child')) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("valid = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can not have any previous siblings. Misplaced element: '");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'RequireOne' && !$(investigatedElements).siblings(allowedSiblings.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("valid = false;");
    tgs.newLine();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or ') + ");
    tgs.append("' can only appear with at least one sibling matching: ' + allowedSiblings.join(' or ') + '. Misplaced element: '");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();


    tgs.indent();
    tgs.append("if (!valid) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("printMessage3(type, message, investigatedElement);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements = [];");
    tgs.newLine();
    tgs.indent();
    tgs.append("$(applyTo.join(', ')).each(function () {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (condition == 'Next' && $(this).next(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'NextAll' && $(this).nextAll(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'NextNo' && !$(this).is(':last-child')) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (condition == 'Prev' && $(this).prev(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'PrevAll' && $(this).prevAll(':not(' + allowedSiblings.join(', ') + ')').length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'PrevNo' && !$(this).is(':first-child')) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (condition == 'RequireOne' && !(this).siblings(allowedSiblings.join(', ')).length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("misplacedElements.push($(this).get(0));");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.indent();
    tgs.append("});");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (misplacedElements.length) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("var message = 'Siblings' + type + ' (check id: ' + id + '): elements which satisfy ' + applyTo.join(' or '); ");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'Next') message = message + ");
    tgs.append("' can only have next immediate sibling matching: ' + allowedSiblings.join(' or ') + '. Misplaced elements: ';");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'NextAll') message = message + ");
    tgs.append("' can only have next siblings matching: ' + allowedSiblings.join(' or ') + '. Misplaced elements: ';");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'NextNo') message = message + ");
    tgs.append("' can not have any next siblings. Misplaced elements: ';");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'Prev') message = message + ");
    tgs.append("' can only have previous immediate sibling matching: ' + allowedSiblings.join(' or ') + '. Misplaced elements: ';");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'PrevAll') message = message + ");
    tgs.append("' can only have previous siblings matching: ' + allowedSiblings.join(' or ') + '. Misplaced elements: ';");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'PrevNo') message = message + ");
    tgs.append("' can not have any previous siblings. Misplaced elements: ';");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (condition == 'RequireOne') message = message + ");
    tgs.append("' must have at least one sibling matching: ' + allowedSiblings.join(' or ') + '. Misplaced elements: ';");
    tgs.newLine();

    tgs.indent();
    tgs.append("printMessage3(type, message, misplacedElements);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();


    tgs.append("function printMissingElementChecks() {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("for (var i = 0; i < requiredElements.length; i ++) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (requiredElements[i].missing) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("      var message = 'MissingElement' + requiredElements[i].type + ' (check id: ' + requiredElements[i].id + '): presence of an element matching ' + requiredElements[i].applyTo.join(' or ') + ");
    tgs.append("' is required by ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x74695853078e2b1eL, "supportedFramework")));
    tgs.append(".';");
    tgs.newLine();

    tgs.indent();
    tgs.append("message = (requiredElements[i].customMessage != '-' ? requiredElements[i].customMessage : message);");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMessage2(requiredElements[i].type, message);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function printMessage5(type, message1, elements1, message2, elements2) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (type === 'Warning') {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.warn(message1, elements1, message2, elements2);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (type === 'Error') {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.error(message1, element1, message2, elements2);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.append("}");
    tgs.newLine();
    tgs.newLine();


    tgs.append("function printMessage3(type, message, elements) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (type === 'Warning') {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.warn(message, elements);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (type === 'Error') {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.error(message, elements);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function printMessage2(type, message) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("if (type === 'Warning') {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.warn(message);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    tgs.indent();
    tgs.append("if (type === 'Error') {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("console.error(message);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();

    tgs.append("}");
    tgs.newLine();
    tgs.newLine();



    tgs.append("function runChecks() {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), MetaAdapterFactory.getContainmentLink(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x74695853078e2ad1L, 0x74695853078e2ae6L, "checks"))) {
      tgs.appendNode(item);
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.append("var singleDomIterationMode, requiredElements, domElements, investigatedElement, disabledChecks;");
    tgs.newLine();
    tgs.newLine();

    tgs.append("function ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    tgs.append("(mode, disable) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("singleDomIterationMode = mode;");
    tgs.newLine();
    tgs.indent();
    tgs.append("disabledChecks = disable;");
    tgs.newLine();
    tgs.indent();
    tgs.append("requiredElements  = [];");
    tgs.newLine();
    tgs.indent();
    tgs.append("domElements = [];");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("if (singleDomIterationMode) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("domElements = document.querySelectorAll('*');");
    tgs.newLine();
    tgs.indent();
    tgs.append("for (var i = 0; i < domElements.length; i ++) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("investigatedElement = domElements[i];");
    tgs.newLine();
    tgs.indent();
    tgs.append("runChecks();");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.indent();
    tgs.append("printMissingElementChecks();");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("} else {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("runChecks();");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.indent();
    tgs.append("alert(\"Check the console to see violations. (Press F12)\");");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
  }
}
