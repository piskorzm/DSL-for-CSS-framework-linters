package LinterDSL.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeParent;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodePointer;

public class SiblingsCheck_Constraints extends BaseConstraintsDescriptor {
  public SiblingsCheck_Constraints() {
    super(MetaAdapterFactory.getConcept(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x7f24bdd32ec2bc88L, "LinterDSL.structure.SiblingsCheck"));
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeParent, Boolean> calculateCanBeParentConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeParent, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeParent context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAParent(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAParent(SNode node, SNode childNode, SAbstractConcept childConcept, SContainmentLink link) {
    boolean isValid = true;

    if ((SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x7f24bdd32ec2bc88L, 0x7f24bdd32ec5e514L, "condition")) == "NextNo" || SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x7f24bdd32ec2bc88L, 0x7f24bdd32ec5e514L, "condition")) == "PrevNo") && ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x7f24bdd32ec2bc88L, 0x7f24bdd32ec2bc9cL, "allowedSiblings"))).count() > 0) {
      isValid = false;
    }

    if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x7f24bdd32ec2bc88L, 0x7f24bdd32ec5e514L, "condition")) != "NextNo" && SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x7f24bdd32ec2bc88L, 0x7f24bdd32ec5e514L, "condition")) != "PrevNo" && ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xc400f4156edc4c5fL, 0xa0ceccbb04f551e6L, 0x7f24bdd32ec2bc88L, 0x7f24bdd32ec2bc9cL, "allowedSiblings"))).count() == 0) {
      isValid = false;
    }


    return isValid;
  }
  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:6a35baca-83d5-490d-a803-4014c498d48f(LinterDSL.constraints)", "3813382560013704423");
}
