package LinterDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AllowedChildrenCheck;
  private ConceptPresentation props_AllowedParentCheck;
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_Check;
  private ConceptPresentation props_Linter;
  private ConceptPresentation props_MissingTagCheck;
  private ConceptPresentation props_MisuseCheck;
  private ConceptPresentation props_RequiredChildrenCheck;
  private ConceptPresentation props_RequiredParentCheck;
  private ConceptPresentation props_Selector;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AllowedChildrenCheck:
        if (props_AllowedChildrenCheck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AllowedChildrenCheck = cpb.create();
        }
        return props_AllowedChildrenCheck;
      case LanguageConceptSwitch.AllowedParentCheck:
        if (props_AllowedParentCheck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AllowedParentCheck = cpb.create();
        }
        return props_AllowedParentCheck;
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("attribute");
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.Check:
        if (props_Check == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Check = cpb.create();
        }
        return props_Check;
      case LanguageConceptSwitch.Linter:
        if (props_Linter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Linter = cpb.create();
        }
        return props_Linter;
      case LanguageConceptSwitch.MissingTagCheck:
        if (props_MissingTagCheck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MissingTagCheck = cpb.create();
        }
        return props_MissingTagCheck;
      case LanguageConceptSwitch.MisuseCheck:
        if (props_MisuseCheck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MisuseCheck = cpb.create();
        }
        return props_MisuseCheck;
      case LanguageConceptSwitch.RequiredChildrenCheck:
        if (props_RequiredChildrenCheck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequiredChildrenCheck = cpb.create();
        }
        return props_RequiredChildrenCheck;
      case LanguageConceptSwitch.RequiredParentCheck:
        if (props_RequiredParentCheck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequiredParentCheck = cpb.create();
        }
        return props_RequiredParentCheck;
      case LanguageConceptSwitch.Selector:
        if (props_Selector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Selector");
          props_Selector = cpb.create();
        }
        return props_Selector;
    }
    return null;
  }
}
